import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import seaborn as sns
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas


# 1. Cargar Datos
df = pd.read_csv("C:/Users/Patrick/Desktop/programacion/entregable/netflix_movies_detailed_up_to_2025.csv")
print(df.columns)
print(df.head())

# Renombrar columnas a espa침ol
df.rename(columns={"budget": "Presupuesto", "revenue": "Ingresos", "vote_average": "Calificacion_Promedio"}, inplace=True)

# 2. Preprocesamiento de Datos
df.fillna(method="ffill", inplace=True)
scaler = StandardScaler()
columnas_numericas = ["Presupuesto", "Ingresos", "Calificacion_Promedio"]
df[columnas_numericas] = scaler.fit_transform(df[columnas_numericas])

# Eliminar columnas no num칠ricas antes de entrenar el modelo
X = df[columnas_numericas]
y = df["Ingresos"]

# 3. Modelo de Machine Learning (Regresi칩n)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modelo_rf = RandomForestRegressor(n_estimators=100, random_state=42)
modelo_rf.fit(X_train, y_train)
y_pred = modelo_rf.predict(X_test)
print("Error Absoluto Medio:", mean_absolute_error(y_test, y_pred))

# 4. Modelo de Machine Learning con PyTorch
X_tensor = torch.tensor(X_train.values, dtype=torch.float32)
y_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)

class RedNeuronal(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(len(columnas_numericas), 64)
        self.fc2 = nn.Linear(64, 1)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

modelo_torch = RedNeuronal()
criterio = nn.MSELoss()
optimizador = optim.Adam(modelo_torch.parameters(), lr=0.01)

for epoch in range(100):
    optimizador.zero_grad()
    predicciones = modelo_torch(X_tensor)
    perdida = criterio(predicciones, y_tensor)
    perdida.backward()
    optimizador.step()
print("Entrenamiento con PyTorch Completado")

# 5. Procesamiento de Lenguaje Natural (NLP)
nltk.download('vader_lexicon')
sia = SentimentIntensityAnalyzer()
texto = "Las pel칤culas con mayor presupuesto suelen tener mejor rendimiento."
sentimiento = sia.polarity_scores(texto)
print("An치lisis de Sentimiento:", sentimiento)

# 6. Visualizaci칩n de Datos
sns.set_theme(style="whitegrid", palette="pastel")

# 游늵 Gr치fico de tendencia de ingresos
plt.figure(figsize=(12, 6))
# Gr치fico de ingresos
plt.plot(df.index, df["Ingresos"], label="Ingresos", color="#7d3c98", linewidth=2, linestyle="--", marker="o", markersize=5, alpha=0.8)
# Etiquetas mejoradas
plt.xlabel("칈ndice", fontsize=14, fontweight="bold")
plt.ylabel("Ingresos", fontsize=14, fontweight="bold")
plt.title("游늳 Tendencia de Ingresos en Pel칤culas", fontsize=16, fontweight="bold", color="#4a235a")
# Separadores de miles en el eje Y
plt.gca().yaxis.set_major_formatter(mticker.FuncFormatter(lambda x, _: f"{x:,.0f}"))
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
# Cuadr칤cula m치s suave
plt.grid(True, linestyle="--", alpha=0.5)
# Leyenda bien posicionada
plt.legend(fontsize=12, loc="upper left")
plt.tight_layout()
plt.show()

                                   # 游댠 Matriz de correlaci칩n con mejoras en el dise침o
plt.figure(figsize=(10, 8))  # Aumentamos el tama침o de la figura

# Mapa de calor con mejor contraste y mayor separaci칩n entre valores
sns.heatmap(df[columnas_numericas].corr(), 
            annot=True, 
            cmap="coolwarm", 
            fmt=".2f", 
            linewidths=2,  # L칤neas m치s gruesas para separar las celdas
            square=True, 
            cbar_kws={'shrink': 0.8},  # Barra de color m치s visible
            annot_kws={"size": 12, "weight": "bold"})  # Agrandamos los valores en el mapa de calor

# Personalizaci칩n de los textos
plt.title("游댌 Matriz de Correlaci칩n", fontsize=18, fontweight="bold", color="#4a235a")
plt.xticks(rotation=45, fontsize=14, color="#2e4053", fontweight="bold")
plt.yticks(fontsize=14, color="#2e4053", fontweight="bold")
# Agregar una nota explicativa dentro del gr치fico


plt.tight_layout()
plt.show()


# 游늵 Correlaci칩n de variables con los ingresos
# Calcular correlaciones con "Ingresos"
correlaciones = df[columnas_numericas].corr()["Ingresos"].drop("Ingresos")
plt.figure(figsize=(9, 6))

# Barras con colores personalizados
correlaciones.plot(kind='bar', 
                   color=sns.color_palette("coolwarm", len(correlaciones)), 
                   alpha=0.85, 
                   edgecolor="black", 
                   width=0.1)  # 游댳 Hace las barras m치s finas

plt.title("游늵 Correlaci칩n de Variables con los Ingresos", fontsize=16, fontweight="bold", color="#4a235a")
plt.xlabel("Variables", fontsize=14, fontweight="bold")
plt.ylabel("Coeficiente de Correlaci칩n", fontsize=14, fontweight="bold")
plt.xticks(rotation=30, fontsize=12, color="#2e4053")
plt.yticks(fontsize=12, color="#2e4053")

# L칤neas de referencia para facilitar lectura
plt.axhline(y=0, color="black", linewidth=1.3, linestyle="--")  # L칤nea en y=0
plt.grid(axis="y", linestyle="--", alpha=0.5)

plt.tight_layout()
plt.show()

# 7. Generar Informe en PDF
c = canvas.Canvas("informe_final.pdf", pagesize=letter)
c.drawString(100, 750, "Informe Final: An치lisis de Datos de Netflix")
c.drawString(100, 730, "Resultados del Modelo de Predicci칩n")
c.save()
print("Informe PDF generado con 칠xito.")
#python pro.py